"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const visitor_as_1 = require("visitor-as");
const toIgnore = [
    "builtin",
    ".spec",
    "dataview",
    "date",
    "math",
    "number",
    "string",
    "typedarray",
    "bindings/Date",
    "bindings/Math"
];
class TypeChecker extends visitor_as_1.BaseVisitor {
    check(node) {
        let first = node.text.substring(0, node.text.indexOf("\n"));
        if (!(first.includes("ignore") ||
            toIgnore.some(n => node.normalizedPath.includes(n)))) {
            this.visit(node);
        }
    }
    static check(node) {
        const typeChecker = new TypeChecker();
        for (let i = 0; i < node.sources.length; i++) {
            typeChecker.check(node.sources[i]);
        }
    }
    visitTypeName(node) {
        const regex = /f32|f64/;
        if (regex.test(node.identifier.text)) {
            let range = node.range;
            let source = range.source;
            let line = source.lineAt(range.start);
            let lineStr = source.text.split("\n")[line - 1];
            TypeChecker.floatsFound.push("\n" + " ".repeat(4) + lineStr + "\n" +
                "in " +
                source.normalizedPath +
                "(" +
                line.toString() +
                "," +
                source.columnAt().toString() +
                ")");
        }
    }
    static checkBinary(node) {
        const wat = node.toText();
        const regex = /f32|f64/;
        if (regex.test(wat)) {
            throw new Error("Floating point numbers are not allowed in smart contracts: Check\n" +
                TypeChecker.floatsFound.join("\n"));
        }
    }
}
exports.TypeChecker = TypeChecker;
TypeChecker.floatsFound = [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZUNoZWNrZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdHlwZUNoZWNrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSwyQ0FBeUM7QUFNekMsTUFBTSxRQUFRLEdBQUc7SUFDZixTQUFTO0lBQ1QsT0FBTztJQUNQLFVBQVU7SUFDVixNQUFNO0lBQ04sTUFBTTtJQUNOLFFBQVE7SUFDUixRQUFRO0lBQ1IsWUFBWTtJQUNaLGVBQWU7SUFDZixlQUFlO0NBQ2hCLENBQUM7QUFFRixNQUFhLFdBQVksU0FBUSx3QkFBVztJQUcxQyxLQUFLLENBQUMsSUFBWTtRQUNoQixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUM1RCxJQUNFLENBQUMsQ0FDQyxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztZQUN4QixRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDcEQsRUFDRDtZQUNBLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDbEI7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFZO1FBQ3ZCLE1BQU0sV0FBVyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7UUFDdEMsS0FBSyxJQUFJLENBQUMsR0FBUSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2pELFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3BDO0lBQ0gsQ0FBQztJQUVELGFBQWEsQ0FBQyxJQUFjO1FBQzFCLE1BQU0sS0FBSyxHQUFtQixTQUFTLENBQUM7UUFDeEMsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDcEMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUN2QixJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO1lBQzFCLElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3RDLElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztZQUVoRCxXQUFXLENBQUMsV0FBVyxDQUFDLElBQUksQ0FDMUIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxHQUFHLElBQUk7Z0JBQ25DLEtBQUs7Z0JBQ0osTUFBTSxDQUFDLGNBQWM7Z0JBQ3RCLEdBQUc7Z0JBQ0gsSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDZixHQUFHO2dCQUNILE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLEVBQUU7Z0JBQzVCLEdBQUcsQ0FDTixDQUFDO1NBQ0g7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFZO1FBQzdCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUMxQixNQUFNLEtBQUssR0FBbUIsU0FBUyxDQUFDO1FBQ3hDLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNuQixNQUFNLElBQUksS0FBSyxDQUNiLG9FQUFvRTtnQkFDbEUsV0FBVyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQ3JDLENBQUM7U0FDSDtJQUNILENBQUM7O0FBcERILGtDQXFEQztBQXBEUSx1QkFBVyxHQUFhLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFR5cGVOYW1lLCBNb2R1bGUsIFNvdXJjZSwgUGFyc2VyIH0gZnJvbSBcInZpc2l0b3ItYXMvYXNcIjtcbmltcG9ydCB7IEJhc2VWaXNpdG9yIH0gZnJvbSBcInZpc2l0b3ItYXNcIjtcblxuZGVjbGFyZSBpbnRlcmZhY2UgUmVnRXhwIHtcbiAgdGVzdChzOiBzdHJpbmcpOiBib29sO1xufVxuXG5jb25zdCB0b0lnbm9yZSA9IFtcbiAgXCJidWlsdGluXCIsXG4gIFwiLnNwZWNcIixcbiAgXCJkYXRhdmlld1wiLFxuICBcImRhdGVcIixcbiAgXCJtYXRoXCIsXG4gIFwibnVtYmVyXCIsXG4gIFwic3RyaW5nXCIsXG4gIFwidHlwZWRhcnJheVwiLFxuICBcImJpbmRpbmdzL0RhdGVcIixcbiAgXCJiaW5kaW5ncy9NYXRoXCJcbl07XG5cbmV4cG9ydCBjbGFzcyBUeXBlQ2hlY2tlciBleHRlbmRzIEJhc2VWaXNpdG9yIHtcbiAgc3RhdGljIGZsb2F0c0ZvdW5kOiBzdHJpbmdbXSA9IFtdO1xuXG4gIGNoZWNrKG5vZGU6IFNvdXJjZSk6IHZvaWQge1xuICAgIGxldCBmaXJzdCA9IG5vZGUudGV4dC5zdWJzdHJpbmcoMCwgbm9kZS50ZXh0LmluZGV4T2YoXCJcXG5cIikpO1xuICAgIGlmIChcbiAgICAgICEoXG4gICAgICAgIGZpcnN0LmluY2x1ZGVzKFwiaWdub3JlXCIpIHx8XG4gICAgICAgIHRvSWdub3JlLnNvbWUobiA9PiBub2RlLm5vcm1hbGl6ZWRQYXRoLmluY2x1ZGVzKG4pKVxuICAgICAgKVxuICAgICkge1xuICAgICAgdGhpcy52aXNpdChub2RlKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgY2hlY2sobm9kZTogUGFyc2VyKTogdm9pZCB7XG4gICAgY29uc3QgdHlwZUNoZWNrZXIgPSBuZXcgVHlwZUNoZWNrZXIoKTtcbiAgICBmb3IgKGxldCBpOiBpMzIgPSAwOyBpIDwgbm9kZS5zb3VyY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0eXBlQ2hlY2tlci5jaGVjayhub2RlLnNvdXJjZXNbaV0pO1xuICAgIH1cbiAgfVxuXG4gIHZpc2l0VHlwZU5hbWUobm9kZTogVHlwZU5hbWUpOiB2b2lkIHtcbiAgICBjb25zdCByZWdleDogUmVnRXhwID0gPFJlZ0V4cD4vZjMyfGY2NC87XG4gICAgaWYgKHJlZ2V4LnRlc3Qobm9kZS5pZGVudGlmaWVyLnRleHQpKSB7XG4gICAgICBsZXQgcmFuZ2UgPSBub2RlLnJhbmdlO1xuICAgICAgbGV0IHNvdXJjZSA9IHJhbmdlLnNvdXJjZTtcbiAgICAgIGxldCBsaW5lID0gc291cmNlLmxpbmVBdChyYW5nZS5zdGFydCk7XG4gICAgICBsZXQgbGluZVN0ciA9IHNvdXJjZS50ZXh0LnNwbGl0KFwiXFxuXCIpW2xpbmUgLSAxXTtcblxuICAgICAgVHlwZUNoZWNrZXIuZmxvYXRzRm91bmQucHVzaChcbiAgICAgICAgXCJcXG5cIiArIFwiIFwiLnJlcGVhdCg0KSArIGxpbmVTdHIgKyBcIlxcblwiICtcbiAgICAgICAgICBcImluIFwiICtcbiAgICAgICAgICAgc291cmNlLm5vcm1hbGl6ZWRQYXRoICtcbiAgICAgICAgICBcIihcIiArXG4gICAgICAgICAgbGluZS50b1N0cmluZygpICtcbiAgICAgICAgICBcIixcIiArXG4gICAgICAgICAgc291cmNlLmNvbHVtbkF0KCkudG9TdHJpbmcoKSArXG4gICAgICAgICAgXCIpXCJcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGNoZWNrQmluYXJ5KG5vZGU6IE1vZHVsZSkge1xuICAgIGNvbnN0IHdhdCA9IG5vZGUudG9UZXh0KCk7XG4gICAgY29uc3QgcmVnZXg6IFJlZ0V4cCA9IDxSZWdFeHA+L2YzMnxmNjQvO1xuICAgIGlmIChyZWdleC50ZXN0KHdhdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJGbG9hdGluZyBwb2ludCBudW1iZXJzIGFyZSBub3QgYWxsb3dlZCBpbiBzbWFydCBjb250cmFjdHM6IENoZWNrXFxuXCIgK1xuICAgICAgICAgIFR5cGVDaGVja2VyLmZsb2F0c0ZvdW5kLmpvaW4oXCJcXG5cIilcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG4iXX0=