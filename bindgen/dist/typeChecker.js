"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeChecker = void 0;
const visitor_as_1 = require("visitor-as");
const toIgnore = [
    "builtin",
    ".spec",
    "dataview",
    "date",
    "math",
    "number",
    "string",
    "typedarray",
    "bindings/Date",
    "bindings/Math"
];
class TypeChecker extends visitor_as_1.BaseVisitor {
    check(node) {
        let first = node.text.substring(0, node.text.indexOf("\n"));
        if (!(first.includes("ignore") ||
            toIgnore.some(n => node.normalizedPath.includes(n)))) {
            this.visit(node);
        }
    }
    static check(node) {
        const typeChecker = new TypeChecker();
        for (let i = 0; i < node.sources.length; i++) {
            typeChecker.check(node.sources[i]);
        }
    }
    visitTypeName(node) {
        const regex = /f32|f64/;
        if (regex.test(node.identifier.text)) {
            let range = node.range;
            let source = range.source;
            let line = source.lineAt(range.start);
            let lineStr = source.text.split("\n")[line - 1];
            TypeChecker.floatsFound.push("\n" + " ".repeat(4) + lineStr + "\n" +
                "in " +
                source.normalizedPath +
                "(" +
                line.toString() +
                "," +
                source.columnAt().toString() +
                ")");
        }
    }
    static checkBinary(node) {
        const wat = node.toText();
        const regex = /f32|f64/;
        if (regex.test(wat)) {
            throw new Error("Floating point numbers are not allowed in smart contracts: Check\n" +
                TypeChecker.floatsFound.join("\n"));
        }
    }
}
exports.TypeChecker = TypeChecker;
TypeChecker.floatsFound = [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZUNoZWNrZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdHlwZUNoZWNrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsMkNBQXlDO0FBTXpDLE1BQU0sUUFBUSxHQUFHO0lBQ2YsU0FBUztJQUNULE9BQU87SUFDUCxVQUFVO0lBQ1YsTUFBTTtJQUNOLE1BQU07SUFDTixRQUFRO0lBQ1IsUUFBUTtJQUNSLFlBQVk7SUFDWixlQUFlO0lBQ2YsZUFBZTtDQUNoQixDQUFDO0FBRUYsTUFBYSxXQUFZLFNBQVEsd0JBQVc7SUFHMUMsS0FBSyxDQUFDLElBQVk7UUFDaEIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDNUQsSUFDRSxDQUFDLENBQ0MsS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7WUFDeEIsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ3BELEVBQ0Q7WUFDQSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBWTtRQUN2QixNQUFNLFdBQVcsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQ3RDLEtBQUssSUFBSSxDQUFDLEdBQVEsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNqRCxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNwQztJQUNILENBQUM7SUFFRCxhQUFhLENBQUMsSUFBYztRQUMxQixNQUFNLEtBQUssR0FBbUIsU0FBUyxDQUFDO1FBQ3hDLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3BDLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDdkIsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztZQUMxQixJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN0QyxJQUFJLE9BQU8sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFFaEQsV0FBVyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQzFCLElBQUksR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sR0FBRyxJQUFJO2dCQUNuQyxLQUFLO2dCQUNKLE1BQU0sQ0FBQyxjQUFjO2dCQUN0QixHQUFHO2dCQUNILElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2YsR0FBRztnQkFDSCxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxFQUFFO2dCQUM1QixHQUFHLENBQ04sQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBWTtRQUM3QixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDMUIsTUFBTSxLQUFLLEdBQW1CLFNBQVMsQ0FBQztRQUN4QyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDbkIsTUFBTSxJQUFJLEtBQUssQ0FDYixvRUFBb0U7Z0JBQ2xFLFdBQVcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUNyQyxDQUFDO1NBQ0g7SUFDSCxDQUFDOztBQXBESCxrQ0FxREM7QUFwRFEsdUJBQVcsR0FBYSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUeXBlTmFtZSwgTW9kdWxlLCBTb3VyY2UsIFBhcnNlciB9IGZyb20gXCJ2aXNpdG9yLWFzL2FzXCI7XG5pbXBvcnQgeyBCYXNlVmlzaXRvciB9IGZyb20gXCJ2aXNpdG9yLWFzXCI7XG5cbmRlY2xhcmUgaW50ZXJmYWNlIFJlZ0V4cCB7XG4gIHRlc3Qoczogc3RyaW5nKTogYm9vbDtcbn1cblxuY29uc3QgdG9JZ25vcmUgPSBbXG4gIFwiYnVpbHRpblwiLFxuICBcIi5zcGVjXCIsXG4gIFwiZGF0YXZpZXdcIixcbiAgXCJkYXRlXCIsXG4gIFwibWF0aFwiLFxuICBcIm51bWJlclwiLFxuICBcInN0cmluZ1wiLFxuICBcInR5cGVkYXJyYXlcIixcbiAgXCJiaW5kaW5ncy9EYXRlXCIsXG4gIFwiYmluZGluZ3MvTWF0aFwiXG5dO1xuXG5leHBvcnQgY2xhc3MgVHlwZUNoZWNrZXIgZXh0ZW5kcyBCYXNlVmlzaXRvciB7XG4gIHN0YXRpYyBmbG9hdHNGb3VuZDogc3RyaW5nW10gPSBbXTtcblxuICBjaGVjayhub2RlOiBTb3VyY2UpOiB2b2lkIHtcbiAgICBsZXQgZmlyc3QgPSBub2RlLnRleHQuc3Vic3RyaW5nKDAsIG5vZGUudGV4dC5pbmRleE9mKFwiXFxuXCIpKTtcbiAgICBpZiAoXG4gICAgICAhKFxuICAgICAgICBmaXJzdC5pbmNsdWRlcyhcImlnbm9yZVwiKSB8fFxuICAgICAgICB0b0lnbm9yZS5zb21lKG4gPT4gbm9kZS5ub3JtYWxpemVkUGF0aC5pbmNsdWRlcyhuKSlcbiAgICAgIClcbiAgICApIHtcbiAgICAgIHRoaXMudmlzaXQobm9kZSk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGNoZWNrKG5vZGU6IFBhcnNlcik6IHZvaWQge1xuICAgIGNvbnN0IHR5cGVDaGVja2VyID0gbmV3IFR5cGVDaGVja2VyKCk7XG4gICAgZm9yIChsZXQgaTogaTMyID0gMDsgaSA8IG5vZGUuc291cmNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdHlwZUNoZWNrZXIuY2hlY2sobm9kZS5zb3VyY2VzW2ldKTtcbiAgICB9XG4gIH1cblxuICB2aXNpdFR5cGVOYW1lKG5vZGU6IFR5cGVOYW1lKTogdm9pZCB7XG4gICAgY29uc3QgcmVnZXg6IFJlZ0V4cCA9IDxSZWdFeHA+L2YzMnxmNjQvO1xuICAgIGlmIChyZWdleC50ZXN0KG5vZGUuaWRlbnRpZmllci50ZXh0KSkge1xuICAgICAgbGV0IHJhbmdlID0gbm9kZS5yYW5nZTtcbiAgICAgIGxldCBzb3VyY2UgPSByYW5nZS5zb3VyY2U7XG4gICAgICBsZXQgbGluZSA9IHNvdXJjZS5saW5lQXQocmFuZ2Uuc3RhcnQpO1xuICAgICAgbGV0IGxpbmVTdHIgPSBzb3VyY2UudGV4dC5zcGxpdChcIlxcblwiKVtsaW5lIC0gMV07XG5cbiAgICAgIFR5cGVDaGVja2VyLmZsb2F0c0ZvdW5kLnB1c2goXG4gICAgICAgIFwiXFxuXCIgKyBcIiBcIi5yZXBlYXQoNCkgKyBsaW5lU3RyICsgXCJcXG5cIiArXG4gICAgICAgICAgXCJpbiBcIiArXG4gICAgICAgICAgIHNvdXJjZS5ub3JtYWxpemVkUGF0aCArXG4gICAgICAgICAgXCIoXCIgK1xuICAgICAgICAgIGxpbmUudG9TdHJpbmcoKSArXG4gICAgICAgICAgXCIsXCIgK1xuICAgICAgICAgIHNvdXJjZS5jb2x1bW5BdCgpLnRvU3RyaW5nKCkgK1xuICAgICAgICAgIFwiKVwiXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBjaGVja0JpbmFyeShub2RlOiBNb2R1bGUpIHtcbiAgICBjb25zdCB3YXQgPSBub2RlLnRvVGV4dCgpO1xuICAgIGNvbnN0IHJlZ2V4OiBSZWdFeHAgPSA8UmVnRXhwPi9mMzJ8ZjY0LztcbiAgICBpZiAocmVnZXgudGVzdCh3YXQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiRmxvYXRpbmcgcG9pbnQgbnVtYmVycyBhcmUgbm90IGFsbG93ZWQgaW4gc21hcnQgY29udHJhY3RzOiBDaGVja1xcblwiICtcbiAgICAgICAgICBUeXBlQ2hlY2tlci5mbG9hdHNGb3VuZC5qb2luKFwiXFxuXCIpXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuIl19